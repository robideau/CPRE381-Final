DEPTH=1024; 	% Memory depth and width are required 
		% DEPTH is the number of addresses 
WIDTH = 32; 	% WIDTH is the number of bits of data per word
		% DEPTH and WIDTH should be entered as decimal numbers

ADDRESS_RADIX = DEC; 	% Address and value radixes are required
DATA_RADIX = BIN; 	% Enter BIN, DEC, HEX, OCT, or UNS; unless
			% otherwise specified, radixes = HEX

-- Specify values for addresses, which can be single address or range
-- SOME THINGS TO CONSIDER
-- 1) This memory is word-addressable, versus the MIPS conceptual byte-addressable memory.
--    This means that address 1 corresponds to word 1, address 2 corresponds to word 2, etc.
--    Since MIPS will be generating byte addresses, you will have to create some (very simple)
--    logic in your VHDL wrapper to deal with byte/word offsets. 
-- 2) The "single address" notation seems to be least likely to cause confusion so that is what
--    I recommend. 
-- 3) The values need to be in 32-bit hex form (i.e. don't use F when you really mean 0000000F).

0--main:  addi $a0, $zero, 0x0001 
1--       addi $a1, $zero, 0x0010
2--       addi $a2, $zero, 0x0011
3--       addi $a3, $zero, 0x0100
4--       addi $t0, $zero, 0x0101
5--       addi $t1, $zero, 0x0110
6--       addi $t2, $zero, 0x0111
7--       addi $t3, $zero, 0x1000
8--       addi $t4, $zero, 0x1001
9--       addi $t5, $zero, 0x1010
10--      addi $t6, $zero, 0x1011
11--      addi $t7, $zero, 0x1100
12--      addi $s0, $zero, 0x1101
13--      addi $s1, $zero, 0x1110
14--      addi $s2, $zero, 0x1111
15--      addi $s3, $zero, 0x0002
16--      addi $s4, $zero, 0x0020
17--      addi $s5, $zero, 0x0022
18--      addi $s6, $zero, 0x0200
19--      addi $s7, $zero, 0x0202
20--      addi $t8, $zero, 0x0220
21--      addi $t9, $zero, 0x0222
22--      sll  $t1, $a1,   2
23--      add  $t1, $a0,   $t1
24--      lw   $t0, 0($t1)
25--      lw   $t2, 4($t1)
26--      sw   $t2, 0($t1)
27--      sw   $t0, 4($t1)

CONTENT
BEGIN
-- Instruction formats
--R ======-----=====-----=====------
--I ======-----=====----------------
--J ======--------------------------
0  : 00100000000001000000000000000001;
1  : 00100000000001010000000000010000;
2  : 00100000000001100000000000010001;
3  : 00100000000001110000000100000000;
4  : 00100000000010000000000100000001;
5  : 00100000000010010000000100010000;
6  : 00100000000010100000000100010001;
7  : 00100000000010110001000000000000;
8  : 00100000000011000001000000000001;
9  : 00100000000011010001000000010000;
10 : 00100000000011100001000000010001;
11 : 00100000000011110001000100000000;
12 : 00100000000100000001000100000001;
13 : 00100000000100010001000100010000;
14 : 00100000000100100001000100010001;
15 : 00100000000100110000000000000010;
16 : 00100000000101000000000000100000;
17 : 00100000000101010000000000100010;
18 : 00100000000101100000001000000000;
19 : 00100000000101110000001000000010;
20 : 00100000000110000000001000100000;
21 : 00100000000110010000001000100001;
22 : 00000000000001010100100010000000;
23 : 00000000100010010100100000100000;                   
24 : 10001101001010000000000000000000;
25 : 10001101001010100000000000000100;
26 : 10101101001010100000000000000100;
27 : 10101101001010000000000000000000;
[28..255] : 00000000000000000000000000000000;
END;
